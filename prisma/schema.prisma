// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model AllowlistedEmail {
  id     Int    @id @default(autoincrement())
  email  String @unique
  role   Role   @default(USER)
}


model Category {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String?
  keys        CategoryKey[]
  items       Item[]
}

model CategoryKey {
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  key        String
  name       String?

  @@id([categoryId, key])
}

model StorageLocation {
  id          String  @id
  name        String
  description String? @db.Text

  parent   StorageLocation?  @relation("StorageLocationToSelf", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  parentId String?
  children StorageLocation[] @relation("StorageLocationToSelf")
  items    Item[]
}

model Item {
  id          String    @id
  name        String
  description String?   @db.Text
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  categoryId  Int?

  attributes  ItemAttribute[]
  location    StorageLocation? @relation(fields: [locationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  locationId  String?
}

model ItemAttribute {
  item      Item   @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId    String
  key       String
  value     String

  @@id([itemId, key])
}